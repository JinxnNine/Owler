@page "/StudentHome"
@using Owler.Models
@using Owler.Data
@using Microsoft.AspNetCore.Identity
@inject IJSRuntime JsRuntime
@inject ApplicationDbContext DbContext
@inject SignInManager<User> SignInManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager

<div class=" cairo-font ">
    <div class=" homePage d-flex ">
        <LeftSideMenu/>

        <div class="content w-full">
            <!-- start head -->
            <div class=" head bg-white  between-flex">
                <p class="hello">Hello, @User?.Name </p>
                <div class="nav d-flex align-center">
                    <div class="search p-relative ">
                        <i class="fa-solid fa-magnifying-glass fa-fw search-icon "></i>
                        <input type="search" class="search-input p-10 rad-20">
                    </div>
                    <img src="images/image 1.png" alt="" srcset="">
                </div>
            </div>
            <!-- ennd head   -->
            <!-- start  content page-->
            <div class="container p-15 ">
                <div class="forms bg-white   between-flex column-mob p-relative ">
                    <div class="form1 column-mob rad-20 main-border p-10 ">
                        <textarea placeholder="type your note here..." class=" rad-20 main-border p-10"></textarea>
                        <div class="Attach d-flex p-10 column-mob">
                            <span>Attach:</span>
                            <div class=" d-flex p-10 ">
                                <i class="fa-regular fa-folder fa-fw "></i>
                                <input type="file" placeholder="file">
                            </div>
                            <div class=" d-flex p-10 ">
                                <i class="fa-solid fa-link fa-fw"></i>
                                <input type="url" placeholder="link">
                            </div>
                        </div>
                        <div class=" send d-flex p-relative rad-20 main-border">
                            <input type="text" placeholder="Send to ">
                            <button type="submit" class="rad-20 main-border">Send </button>
                        </div>
                    </div>
                    <EditForm OnSubmit="AddStudentToClass" EditContext="new EditContext(0)">
                        <div class="code rad-20  main-border  d-flex flex-col p-20 txt-c">
                            <label for="Enter">Enter Class Code:</label>
                            <InputNumber placeholder="Enter The Class Code " @bind-Value="ClassCode" id="Enter" class="rad-20 main-border "/>
                            <button type="submit" class="main-border rad-20 mt-10 p-10">Join Class</button>
                        </div>
                    </EditForm>
                </div>
                <div class="courses  column-mob p-relative ">
                    <div class="courses-time main-border rad-20  ">
                        @foreach (var post in _posts)
                        {
                            <div class="teacher p-10  d-flex ">
                                <img src="@post?.Image" alt="">
                                <div class="text">
                                    <span>@post?.Name</span>
                                    <p>@post?.Text</p>
                                </div>
                            </div>
                        }
                    </div>
                    <DatePicker/>
                </div>
            </div>
            <!-- end content page-->
        </div>
    </div>

</div>

@code{
    public int? ClassCode { get; set; }

    record AddStudentToClassModel()
    {
    }

    AddStudentToClassModel InputModel { get; set; }

    record Post(string Name, string Text, string Image);

    List<Post> _posts = new()
    {
        new Post("Mr/Ahmed", "Does anyone has a recommendation for Math class second year", "images/Mask group.png"),
        new Post("Mr/Salah Name", "Don't miss today’s QUIZ I’ll drop it by 4pm", "images/Avatars (1).png"),
        new Post("Mr/Othman Name", "Make sure to Finish your assignment and then upload it.", "images/Avatars.png")
    };

    private AuthenticationState? UserAuth { get; set; }
    private User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserAuth = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            User = DbContext.Users.FirstOrDefault(u => u.UserName == UserAuth.User.Identity.Name);
        }
        catch (Exception)
        {
    // ignored
        }
        await base.OnInitializedAsync();
    }


    private async void AddStudentToClass()
    {
        try
        {
            if (ClassCode is null or 0 || User is null) return;
            await DbContext.UserClass.AddAsync(new UserClass { ClassCode = ClassCode.Value, UserId = User.Id });
            await DbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/Classes");
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }

}